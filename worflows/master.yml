name: Master workflow

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test-all:
    name: Build Java application and run test
    runs-on: ubuntu-20.04
    outputs:
        output1: ${{ steps.step1.outputs.test }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: Set version
        id: step1
        run: echo ::set-output name=test::$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
      - name: Run unitary test
        run: mvn -B -Dtest=*UnitaryTest test
      - name: Run REST test
        run: mvn -B -Dtest=*RestTest test
      - name: Run e2e test
        run: mvn -B -Dtest=*SeleniumTest test
  
  publish_in_dockerhub:
    name: Publish in DockerHub
    runs-on: ubuntu-20.04
    needs: [test-all]
    env:
      IMAGE_NAME: a.gat.2021-a.molinalop
    services:
      app:
        image: molynx/a.gat.2021-a.molinalop:${{needs.test-all.outputs.output1}}-rc
        ports:
          - 8080:8080
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: Generate tag
        run: echo ::set-output name=tag::$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
        id: project
      - name: Login to DockerHub
        run: |
          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}" 
          docker images -a
      - name: E2E tests
        run: |
          sleep 15
          mvn test -D"local.server.port"=8080 -Dtest=*SeleniumTest
          mvn test -D"local.server.port"=8080 -Dtest=*RestTest
      - name: Pull image
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ steps.project.outputs.tag }}-rc
          docker images -a
      - name: Push image to DockerHub
        run: |
          docker tag  ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ steps.project.outputs.tag }}-rc ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ steps.project.outputs.tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ steps.project.outputs.tag }}
      - name: Login to GitHub Docker Registry
        run: echo "${{ secrets.PACKAGE_PASSWORD }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_USER=$(echo ${{ github.repository_owner }} | awk '{print tolower($0)}')
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ steps.project.outputs.tag }}-rc ghcr.io/$IMAGE_USER/$IMAGE_NAME:${{ steps.project.outputs.tag }}
          docker push ghcr.io/$IMAGE_USER/$IMAGE_NAME:${{ steps.project.outputs.tag }}